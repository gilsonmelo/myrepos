<% require 'digest/md5' %>
## These are for the <%= @domain %> install.
## The names of the backends have to be shortened
## using an MD5 Hash because varnish only allows a small
## number of characters for them.

<% domain_hash = Digest::MD5.hexdigest(@domain).slice(0,10) %>
backend master_<%= domain_hash %>_admin {
    .host = "<%= @master %>";
    .port = "<%= node['varnish']['backend_port'] %>";
}
backend local_<%= domain_hash %> {
    .host = "127.0.0.1";
    .port = "<%= node['varnish']['backend_port'] %>";
}
acl purge {
  "localhost";
<%- @purge_hosts.each do |purge_host| %>
  "<%= purge_host %>";
<%- end %>
}
sub vcl_recv {
  if (req.http.Host ~ "<%= @domain %>$" && req.url ~ "^<%= @path %>" && req.http.X-Proxy-Proto ~ "HTTPS")
   {
	set req.backend = local_<%= domain_hash %>;

        if (req.request == "PURGE") {
            if (!client.ip ~ purge) {
                error 405 "Not allowed.";
            }
            return(lookup);
        }
        if (req.restarts == 0) {
            if (req.http.x-forwarded-for) {
                set req.http.X-Forwarded-For =
                req.http.X-Forwarded-For + ", " + client.ip;
            } else {
                set req.http.X-Forwarded-For = client.ip;
            }
        }
        if (req.restarts != 0 || req.http.Content-Type ~ "multipart/form-data")
        {
            set req.backend = master_<%= domain_hash %>_admin;
        }
        if ((req.url ~ "wp-(login|admin)") && req.http.cookie ~ "wordpress_logged_in") {
            set req.backend = master_<%= domain_hash %>_admin;
        }

        ### parse accept encoding rulesets to make it look nice
        if (req.http.Accept-Encoding) {
            if (req.http.Accept-Encoding ~ "gzip") {
                set req.http.Accept-Encoding = "gzip";
            } elsif (req.http.Accept-Encoding ~ "deflate") {
                set req.http.Accept-Encoding = "deflate";
            } else {
                # unkown algorithm
                remove req.http.Accept-Encoding;
            }
        }

        return(pass);
  }
  if (req.http.Host ~ "<%= @domain %>$" && req.url ~ "^<%= @path %>")
   {
	set req.backend = local_<%= domain_hash %>;

        if (req.request == "PURGE") {
            if (!client.ip ~ purge) {
                error 405 "Not allowed.";
            }
            return(lookup);
        }
        if (req.restarts == 0) {
            if (req.http.x-forwarded-for) {
                set req.http.X-Forwarded-For =
                req.http.X-Forwarded-For + ", " + client.ip;
            } else {
                set req.http.X-Forwarded-For = client.ip;
            }
        }
        if (req.restarts != 0 || req.http.Content-Type ~ "multipart/form-data")
        {
            set req.backend = master_<%= domain_hash %>_admin;
        }
        if ((req.url ~ "wp-(login|admin)") && req.http.cookie ~ "wordpress_logged_in") {
            set req.backend = master_<%= domain_hash %>_admin;
        }

        ## always cache these images & static assets
        if (req.request == "GET" && req.url ~ "\.(css|js|gif|jpg|jpeg|bmp|png|ico|img|tga|wmf)$") {
            remove req.http.cookie;
            return(lookup);
        }
        if (req.request == "GET" && req.url ~ "(xmlrpc.php|wlmanifest.xml)") {
            remove req.http.cookie;
            return(lookup);
        }

        #never cache POST requests
        if (req.request == "POST")
        {
            return(pass);
        }
        #DO cache this ajax request
        if(req.http.X-Requested-With == "XMLHttpRequest" && req.url ~ "recent_reviews")
        {
            return (lookup);
        }

        #dont cache ajax requests
        if(req.http.X-Requested-With == "XMLHttpRequest" || req.url ~ "nocache" || req.url ~ "(control.php|wp-comments-post.php|wp-login.php|bb-login.php|bb-reset-password.php|register.php)")
        {
            return (pass);
        }

        if (req.http.Cookie && req.http.Cookie ~ "wordpress_") {
            set req.http.Cookie = regsuball(req.http.Cookie, "wordpress_test_cookie=", "; wpjunk=");
        }
        ### don't cache authenticated sessions
        if (req.http.Cookie && req.http.Cookie ~ "(wordpress_|PHPSESSID)") {
            return(pass);
        }

        ### parse accept encoding rulesets to make it look nice
        if (req.http.Accept-Encoding) {
            if (req.http.Accept-Encoding ~ "gzip") {
                set req.http.Accept-Encoding = "gzip";
            } elsif (req.http.Accept-Encoding ~ "deflate") {
                set req.http.Accept-Encoding = "deflate";
            } else {
                # unkown algorithm
                remove req.http.Accept-Encoding;
            }
        }


        if (req.http.Cookie)
        {
            set req.http.Cookie = ";" + req.http.Cookie;
            set req.http.Cookie = regsuball(req.http.Cookie, "; +", ";");
            set req.http.Cookie = regsuball(req.http.Cookie, ";(vendor_region|PHPSESSID|themetype2)=", "; \1=");
            set req.http.Cookie = regsuball(req.http.Cookie, ";[^ ][^;]*", "");
            set req.http.Cookie = regsuball(req.http.Cookie, "^[; ]+|[; ]+$", "");

            if (req.http.Cookie == "") {
                remove req.http.Cookie;
            }
        }
        if (req.url ~ "^/$") {
            unset req.http.cookie;
        }
        return(lookup);
  }
}
sub vcl_hit {
    if (req.backend == local_<%= domain_hash %> || req.backend == master_<%= domain_hash %>_admin) {
      if (req.request == "PURGE") {
          set obj.ttl = 0s;
          error 200 "Purged.";
      }
    }
}
sub vcl_miss {
    if (req.backend == local_<%= domain_hash %> || req.backend == master_<%= domain_hash %>_admin) {
      if (req.request == "PURGE") {
          error 404 "Not in cache.";
      }
      if (!(req.url ~ "wp-(login|admin)")) {
          unset req.http.cookie;
      }
      if (req.url ~ "^/[^?]+.(jpeg|jpg|png|gif|ico|js|css|txt|gz|zip|lzma|bz2|tgz|tbz|html|htm)(\?.|)$") {
          unset req.http.cookie;
          set req.url = regsub(req.url, "\?.$", "");
      }
      if (req.url ~ "^/$") {
          unset req.http.cookie;
      }
    }
}
sub vcl_fetch {
    if (req.backend == local_<%= domain_hash %> || req.backend == master_<%= domain_hash %>_admin) {
      if (beresp.status == 404 && req.restarts == 0)
      {
          return(restart);
      }
      if (req.url ~ "^/$" && !(req.http.X-Proxy-Proto ~ "HTTPS")) {
          unset beresp.http.set-cookie;
      }
      if (!(req.url ~ "wp-(login|admin)") && !(req.http.X-Proxy-Proto ~ "HTTPS")) {
          unset beresp.http.set-cookie;

      }
    }
}
